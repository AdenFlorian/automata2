{"version":3,"sources":["0","fisher.ts"],"names":["module","exports"],"mappings":"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","file":"fisher.dd58c700.map","sourceRoot":"..\\src","sourcesContent":[null,"// https://jameshfisher.com/2017/10/22/webgl-game-of-life.html\n\n// @ts-ignore\nimport displayShader from './display.glsl'\n// @ts-ignore\n// import stepperShader from './conway.glsl'\n// @ts-ignore\nimport stepperShader from './brian.glsl'\n\nconsole.log('start')\nconst startStateImg = new Image()\n\nstartStateImg.onload = function () {\n    const canvasElement = document.getElementById(\"canvas\")! as HTMLCanvasElement\n    const webGlContext = canvasElement.getContext(\"webgl\")!\n\n    function createShader(type: number, source: string) {\n        const shader = webGlContext.createShader(type)!\n        webGlContext.shaderSource(shader, source)\n        webGlContext.compileShader(shader)\n        if (!webGlContext.getShaderParameter(shader, webGlContext.COMPILE_STATUS)) {\n            console.error(\"Could not compile shader\", type, source, webGlContext.getShaderInfoLog(shader))\n        }\n        return shader\n    }\n    const vertexShader = createShader(\n        webGlContext.VERTEX_SHADER,\n        `\n            attribute vec2 coord;\n            void main(void) {\n                gl_Position = vec4(coord, 0.0, 1.0);\n            }\n        `\n    )\n    const fragShaderDisplay = createShader(\n        webGlContext.FRAGMENT_SHADER,\n        displayShader\n    )\n    const fragShaderStepper = createShader(\n        webGlContext.FRAGMENT_SHADER,\n        stepperShader\n    )\n\n    function createProgram(vertexShader: WebGLShader, fragmentShader: WebGLShader) {\n        const program = webGlContext.createProgram()!\n        webGlContext.attachShader(program, vertexShader)\n        webGlContext.attachShader(program, fragmentShader)\n        webGlContext.linkProgram(program)\n        if (!webGlContext.getProgramParameter(program, webGlContext.LINK_STATUS)) {\n            console.error(\"Error linking program\", webGlContext.getProgramInfoLog(program))\n        }\n        return program\n    }\n    const displayProg = createProgram(vertexShader, fragShaderDisplay)\n    const stepperProg = createProgram(vertexShader, fragShaderStepper)\n\n    webGlContext.useProgram(stepperProg)\n\n    const stepperProgCoordLoc = webGlContext.getAttribLocation(stepperProg, \"coord\")\n    const stepperProgPreviousStateLoc = webGlContext.getUniformLocation(stepperProg, \"previousState\")\n\n    const displayProgCoordLoc = webGlContext.getAttribLocation(displayProg, \"coord\")\n    const displayProgStateLoc = webGlContext.getUniformLocation(displayProg, \"state\")\n\n    const vertexBuffer = webGlContext.createBuffer()\n    webGlContext.bindBuffer(webGlContext.ARRAY_BUFFER, vertexBuffer)\n    webGlContext.bufferData(webGlContext.ARRAY_BUFFER, new Float32Array([\n        -1, -1, 1, -1, 1, 1, -1, 1,\n    ]), webGlContext.STATIC_DRAW)\n\n    // Note we must bind ARRAY_BUFFER before running vertexAttribPointer!\n    // This is confusing and deserves a blog post\n    // https://stackoverflow.com/questions/7617668/glvertexattribpointer-needed-everytime-glbindbuffer-is-called\n    webGlContext.vertexAttribPointer(stepperProgCoordLoc, 2, webGlContext.FLOAT, false, 0, 0)\n\n    const elementBuffer = webGlContext.createBuffer()\n    webGlContext.bindBuffer(webGlContext.ELEMENT_ARRAY_BUFFER, elementBuffer)\n    webGlContext.bufferData(webGlContext.ELEMENT_ARRAY_BUFFER, new Uint8Array([0, 1, 2, 3]), webGlContext.STATIC_DRAW)\n\n    const texture0 = webGlContext.createTexture()\n    webGlContext.activeTexture(webGlContext.TEXTURE0)\n    webGlContext.bindTexture(webGlContext.TEXTURE_2D, texture0)\n    webGlContext.texImage2D(webGlContext.TEXTURE_2D, 0, webGlContext.RGB, webGlContext.RGB, webGlContext.UNSIGNED_BYTE, startStateImg)\n    webGlContext.texParameteri(webGlContext.TEXTURE_2D, webGlContext.TEXTURE_MAG_FILTER, webGlContext.NEAREST)\n    webGlContext.texParameteri(webGlContext.TEXTURE_2D, webGlContext.TEXTURE_MIN_FILTER, webGlContext.NEAREST)\n    webGlContext.generateMipmap(webGlContext.TEXTURE_2D)\n\n    const texture1 = webGlContext.createTexture()\n    webGlContext.activeTexture(webGlContext.TEXTURE0 + 1)\n    webGlContext.bindTexture(webGlContext.TEXTURE_2D, texture1)\n    webGlContext.texImage2D(webGlContext.TEXTURE_2D, 0, webGlContext.RGB, webGlContext.RGB, webGlContext.UNSIGNED_BYTE, startStateImg)\n    webGlContext.texParameteri(webGlContext.TEXTURE_2D, webGlContext.TEXTURE_MAG_FILTER, webGlContext.NEAREST)\n    webGlContext.texParameteri(webGlContext.TEXTURE_2D, webGlContext.TEXTURE_MIN_FILTER, webGlContext.NEAREST)\n    webGlContext.generateMipmap(webGlContext.TEXTURE_2D)\n\n    const framebuffers = [webGlContext.createFramebuffer(), webGlContext.createFramebuffer()]\n\n    webGlContext.bindFramebuffer(webGlContext.FRAMEBUFFER, framebuffers[0])\n    webGlContext.framebufferTexture2D(webGlContext.FRAMEBUFFER, webGlContext.COLOR_ATTACHMENT0, webGlContext.TEXTURE_2D, texture0, 0)\n\n    webGlContext.bindFramebuffer(webGlContext.FRAMEBUFFER, framebuffers[1])\n    webGlContext.framebufferTexture2D(webGlContext.FRAMEBUFFER, webGlContext.COLOR_ATTACHMENT0, webGlContext.TEXTURE_2D, texture1, 0)\n\n    let nextStateIndex = 0\n\n    const fast = true\n\n    if (fast) {\n        requestAnimationFrame(loop)\n    } else {\n        setInterval(loop, 1000)\n    }\n\n    function loop(): void {\n        const previousStateIndex = 1 - nextStateIndex\n\n        webGlContext.bindFramebuffer(webGlContext.FRAMEBUFFER, framebuffers[nextStateIndex])\n        webGlContext.useProgram(stepperProg)\n        webGlContext.enableVertexAttribArray(stepperProgCoordLoc)\n        webGlContext.uniform1i(stepperProgPreviousStateLoc, previousStateIndex)\n        webGlContext.drawElements(webGlContext.TRIANGLE_FAN, 4, webGlContext.UNSIGNED_BYTE, 0)\n\n        webGlContext.bindFramebuffer(webGlContext.FRAMEBUFFER, null)\n        webGlContext.useProgram(displayProg)\n        webGlContext.uniform1i(displayProgStateLoc, nextStateIndex)\n        webGlContext.drawElements(webGlContext.TRIANGLE_FAN, 4, webGlContext.UNSIGNED_BYTE, 0)\n\n        nextStateIndex = previousStateIndex\n        if (fast) requestAnimationFrame(loop)\n    }\n}\nstartStateImg.src = \"game-of-life.png\"\n"]}